cat("t-value:", t_diff_tl$statistic, "\n")
cat("Degrees of freedom:", t_diff_tl$parameter, "\n")
cat("p-value:", t_diff_tl$p.value, "\n")
cat("Mean difference (Toilet - Lift):", t_diff_tl$estimate, "\n")
cat("95% Confidence Interval: [", t_diff_tl$conf.int[1], ",", t_diff_tl$conf.int[2], "]\n")
# Toilet vs Meds
t_diff_tm <- t.test(diff_toilet, diff_meds, paired = FALSE)
# Print results
cat("t-test comparing group mean differences (toilet vs meds):\n")
cat("------------------------------------------------------\n")
cat("t-value:", t_diff_tm$statistic, "\n")
cat("Degrees of freedom:", t_diff_tm$parameter, "\n")
cat("p-value:", t_diff_tm$p.value, "\n")
cat("Mean difference (Toilet - Meds):", t_diff_tm$estimate, "\n")
cat("95% Confidence Interval: [", t_diff_tm$conf.int[1], ",", t_diff_tm$conf.int[2], "]\n")
# Toilet vs Bills
t_diff_tb <- t.test(diff_toilet, diff_bills, paired = FALSE)
# Print results
cat("t-test comparing group mean differences (toilet vs bills):\n")
cat("------------------------------------------------------\n")
cat("t-value:", t_diff_tb$statistic, "\n")
cat("Degrees of freedom:", t_diff_tb$parameter, "\n")
cat("p-value:", t_diff_tb$p.value, "\n")
cat("Mean difference (Toilet - Bills):", t_diff_tb$estimate, "\n")
cat("95% Confidence Interval: [", t_diff_tb$conf.int[1], ",", t_diff_tb$conf.int[2], "]\n")
# Toilet vs Calls
t_diff_tc <- t.test(diff_toilet, diff_calls, paired = FALSE)
# Print results
cat("t-test comparing group mean differences (toilet vs calls):\n")
cat("------------------------------------------------------\n")
cat("t-value:", t_diff_tc$statistic, "\n")
cat("Degrees of freedom:", t_diff_tc$parameter, "\n")
cat("p-value:", t_diff_tc$p.value, "\n")
cat("Mean difference (Toilet - Calls):", t_diff_tc$estimate, "\n")
cat("95% Confidence Interval: [", t_diff_tc$conf.int[1], ",", t_diff_tc$conf.int[2], "]\n")
# Toilet vs Hotmeal
t_diff_th <- t.test(diff_toilet, diff_hotmeal, paired = FALSE)
# Print results
cat("t-test comparing group mean differences (toilet vs hotmeal):\n")
cat("------------------------------------------------------\n")
cat("t-value:", t_diff_th$statistic, "\n")
cat("Degrees of freedom:", t_diff_th$parameter, "\n")
cat("p-value:", t_diff_th$p.value, "\n")
cat("Mean difference (Toilet - Hotmeal):", t_diff_th$estimate, "\n")
cat("95% Confidence Interval: [", t_diff_th$conf.int[1], ",", t_diff_th$conf.int[2], "]\n")
# Toilet vs Groceries
t_diff_tg <- t.test(diff_toilet, diff_groceries, paired = FALSE)
# Print results
cat("t-test comparing group mean differences (toilet vs groceries):\n")
cat("------------------------------------------------------\n")
cat("t-value:", t_diff_tg$statistic, "\n")
cat("Degrees of freedom:", t_diff_tg$parameter, "\n")
cat("p-value:", t_diff_tg$p.value, "\n")
cat("Mean difference (Toilet - Groceries):", t_diff_tg$estimate, "\n")
cat("95% Confidence Interval: [", t_diff_tg$conf.int[1], ",", t_diff_tg$conf.int[2], "]\n")
# Stoop vs Lift
t_diff_sl <- t.test(diff_stoop, diff_lift, paired = FALSE)
# Print results
cat("t-test comparing group mean differences (stoop vs lift):\n")
cat("------------------------------------------------------\n")
cat("t-value:", t_diff_sl$statistic, "\n")
cat("Degrees of freedom:", t_diff_sl$parameter, "\n")
cat("p-value:", t_diff_sl$p.value, "\n")
cat("Mean difference (Stoop - Lift):", t_diff_sl$estimate, "\n")
cat("95% Confidence Interval: [", t_diff_sl$conf.int[1], ",", t_diff_sl$conf.int[2], "]\n")
# Stoop vs Meds
t_diff_sm <- t.test(diff_stoop, diff_meds, paired = FALSE)
# Print results
cat("t-test comparing group mean differences (stoop vs meds):\n")
cat("------------------------------------------------------\n")
cat("t-value:", t_diff_sm$statistic, "\n")
cat("Degrees of freedom:", t_diff_sm$parameter, "\n")
cat("p-value:", t_diff_sm$p.value, "\n")
cat("Mean difference (Stoop - Meds):", t_diff_sm$estimate, "\n")
cat("95% Confidence Interval: [", t_diff_sm$conf.int[1], ",", t_diff_sm$conf.int[2], "]\n")
# Stoop vs Bills
t_diff_sb <- t.test(diff_stoop, diff_bills, paired = FALSE)
# Print results
cat("t-test comparing group mean differences (stoop vs bills):\n")
cat("------------------------------------------------------\n")
cat("t-value:", t_diff_sb$statistic, "\n")
cat("Degrees of freedom:", t_diff_sb$parameter, "\n")
cat("p-value:", t_diff_sb$p.value, "\n")
cat("Mean difference (Stoop - Bills):", t_diff_sb$estimate, "\n")
cat("95% Confidence Interval: [", t_diff_sb$conf.int[1], ",", t_diff_sb$conf.int[2], "]\n")
# Stoop vs Calls
t_diff_sc <- t.test(diff_stoop, diff_calls, paired = FALSE)
# Print results
cat("t-test comparing group mean differences (stoop vs calls):\n")
cat("------------------------------------------------------\n")
cat("t-value:", t_diff_sc$statistic, "\n")
cat("Degrees of freedom:", t_diff_sc$parameter, "\n")
cat("p-value:", t_diff_sc$p.value, "\n")
cat("Mean difference (Stoop - Calls):", t_diff_sc$estimate, "\n")
cat("95% Confidence Interval: [", t_diff_sc$conf.int[1], ",", t_diff_sc$conf.int[2], "]\n")
# Stoop vs Hotmeal
t_diff_sh <- t.test(diff_stoop, diff_hotmeal, paired = FALSE)
# Print results
cat("t-test comparing group mean differences (stoop vs hotmeal):\n")
cat("------------------------------------------------------\n")
cat("t-value:", t_diff_sh$statistic, "\n")
cat("Degrees of freedom:", t_diff_sh$parameter, "\n")
cat("p-value:", t_diff_sh$p.value, "\n")
cat("Mean difference (Stoop - Hotmeal):", t_diff_sh$estimate, "\n")
cat("95% Confidence Interval: [", t_diff_sh$conf.int[1], ",", t_diff_sh$conf.int[2], "]\n")
# Stoop vs Groceries
t_diff_sg <- t.test(diff_stoop, diff_groceries, paired = FALSE)
# Print results
cat("t-test comparing group mean differences (stoop vs groceries):\n")
cat("------------------------------------------------------\n")
cat("t-value:", t_diff_sg$statistic, "\n")
cat("Degrees of freedom:", t_diff_sg$parameter, "\n")
cat("p-value:", t_diff_sg$p.value, "\n")
cat("Mean difference (Stoop - Groceries):", t_diff_sg$estimate, "\n")
cat("95% Confidence Interval: [", t_diff_sg$conf.int[1], ",", t_diff_sg$conf.int[2], "]\n")
# Lift vs Meds
t_diff_lm <- t.test(diff_lift, diff_meds, paired = FALSE)
# Print results
cat("t-test comparing group mean differences (lift vs meds):\n")
cat("------------------------------------------------------\n")
cat("t-value:", t_diff_lm$statistic, "\n")
cat("Degrees of freedom:", t_diff_lm$parameter, "\n")
cat("p-value:", t_diff_lm$p.value, "\n")
cat("Mean difference (Lift vs Meds):", t_diff_lm$estimate, "\n")
cat("95% Confidence Interval: [", t_diff_lm$conf.int[1], ",", t_diff_lm$conf.int[2], "]\n")
# Lift vs Bills
t_diff_lb <- t.test(diff_lift, diff_bills, paired = FALSE)
# Print results
cat("t-test comparing group mean differences (lift vs bills):\n")
cat("------------------------------------------------------\n")
cat("t-value:", t_diff_lb$statistic, "\n")
cat("Degrees of freedom:", t_diff_lb$parameter, "\n")
cat("p-value:", t_diff_lb$p.value, "\n")
cat("Mean difference (Lift vs Bills):", t_diff_lb$estimate, "\n")
cat("95% Confidence Interval: [", t_diff_lb$conf.int[1], ",", t_diff_lb$conf.int[2], "]\n")
# Lift vs Calls
t_diff_lc <- t.test(diff_lift, diff_calls, paired = FALSE)
# Print results
cat("t-test comparing group mean differences (lift vs calls):\n")
cat("------------------------------------------------------\n")
cat("t-value:", t_diff_lc$statistic, "\n")
cat("Degrees of freedom:", t_diff_lc$parameter, "\n")
cat("p-value:", t_diff_lc$p.value, "\n")
cat("Mean difference (Lift vs Calls):", t_diff_lc$estimate, "\n")
cat("95% Confidence Interval: [", t_diff_lc$conf.int[1], ",", t_diff_lc$conf.int[2], "]\n")
# Lift vs Hotmeal
t_diff_lh <- t.test(diff_lift, diff_hotmeal, paired = FALSE)
# Print results
cat("t-test comparing group mean differences (lift vs hotmeal):\n")
cat("------------------------------------------------------\n")
cat("t-value:", t_diff_lh$statistic, "\n")
cat("Degrees of freedom:", t_diff_lh$parameter, "\n")
cat("p-value:", t_diff_lh$p.value, "\n")
cat("Mean difference (Lift vs Hotmeal):", t_diff_lh$estimate, "\n")
cat("95% Confidence Interval: [", t_diff_lh$conf.int[1], ",", t_diff_lh$conf.int[2], "]\n")
# Lift vs Groceries
t_diff_lg <- t.test(diff_lift, diff_groceries, paired = FALSE)
# Print results
cat("t-test comparing group mean differences (lift vs groceries):\n")
cat("------------------------------------------------------\n")
cat("t-value:", t_diff_lg$statistic, "\n")
cat("Degrees of freedom:", t_diff_lg$parameter, "\n")
cat("p-value:", t_diff_lg$p.value, "\n")
cat("Mean difference (Lift vs Groceries):", t_diff_lg$estimate, "\n")
cat("95% Confidence Interval: [", t_diff_lg$conf.int[1], ",", t_diff_lg$conf.int[2], "]\n")
# Meds vs Bills
t_diff_mb <- t.test(diff_meds, diff_bills, paired = FALSE)
# Print results
cat("t-test comparing group mean differences (meds vs bills):\n")
cat("------------------------------------------------------\n")
cat("t-value:", t_diff_mb$statistic, "\n")
cat("Degrees of freedom:", t_diff_mb$parameter, "\n")
cat("p-value:", t_diff_mb$p.value, "\n")
cat("Mean difference (Meds vs Bills):", t_diff_mb$estimate, "\n")
cat("95% Confidence Interval: [", t_diff_mb$conf.int[1], ",", t_diff_mb$conf.int[2], "]\n")
# Meds vs Calls
t_diff_mc <- t.test(diff_meds, diff_calls, paired = FALSE)
# Print results
cat("t-test comparing group mean differences (meds vs calls):\n")
cat("------------------------------------------------------\n")
cat("t-value:", t_diff_mc$statistic, "\n")
cat("Degrees of freedom:", t_diff_mc$parameter, "\n")
cat("p-value:", t_diff_mc$p.value, "\n")
cat("Mean difference (Meds vs Calls):", t_diff_mc$estimate, "\n")
cat("95% Confidence Interval: [", t_diff_mc$conf.int[1], ",", t_diff_mc$conf.int[2], "]\n")
# Meds vs Hotmeal
t_diff_mh <- t.test(diff_meds, diff_hotmeal, paired = FALSE)
# Print results
cat("t-test comparing group mean differences (meds vs hotmeal):\n")
cat("------------------------------------------------------\n")
cat("t-value:", t_diff_mh$statistic, "\n")
cat("Degrees of freedom:", t_diff_mh$parameter, "\n")
cat("p-value:", t_diff_mh$p.value, "\n")
cat("Mean difference (Meds vs Hotmeal):", t_diff_mh$estimate, "\n")
cat("95% Confidence Interval: [", t_diff_mh$conf.int[1], ",", t_diff_mh$conf.int[2], "]\n")
# Meds vs Groceries
t_diff_mg <- t.test(diff_meds, diff_groceries, paired = FALSE)
# Print results
cat("t-test comparing group mean differences (meds vs groceries):\n")
cat("------------------------------------------------------\n")
cat("t-value:", t_diff_mg$statistic, "\n")
cat("Degrees of freedom:", t_diff_mg$parameter, "\n")
cat("p-value:", t_diff_mg$p.value, "\n")
cat("Mean difference (Meds vs Groceries):", t_diff_mg$estimate, "\n")
cat("95% Confidence Interval: [", t_diff_mg$conf.int[1], ",", t_diff_mg$conf.int[2], "]\n")
# Bills vs Calls
t_diff_bi_ca <- t.test(diff_bills, diff_calls, paired = FALSE)
# Print results
cat("t-test comparing group mean differences (bills vs calls):\n")
cat("------------------------------------------------------\n")
cat("t-value:", t_diff_bi_ca$statistic, "\n")
cat("Degrees of freedom:", t_diff_bi_ca$parameter, "\n")
cat("p-value:", t_diff_bi_ca$p.value, "\n")
cat("Mean difference (Bills vs Calls):", t_diff_bi_ca$estimate, "\n")
cat("95% Confidence Interval: [", t_diff_bi_ca$conf.int[1], ",", t_diff_bi_ca$conf.int[2], "]\n")
# Bills vs Hotmeal
t_diff_bi_ho <- t.test(diff_bills, diff_hotmeal, paired = FALSE)
# Print results
cat("t-test comparing group mean differences (bills vs hotmeal):\n")
cat("------------------------------------------------------\n")
cat("t-value:", t_diff_bi_ho$statistic, "\n")
cat("Degrees of freedom:", t_diff_bi_ho$parameter, "\n")
cat("p-value:", t_diff_bi_ho$p.value, "\n")
cat("Mean difference (Bills vs Hotmeal):", t_diff_bi_ho$estimate, "\n")
cat("95% Confidence Interval: [", t_diff_bi_ho$conf.int[1], ",", t_diff_bi_ho$conf.int[2], "]\n")
# Bills vs Groceries
t_diff_bi_gr <- t.test(diff_bills, diff_groceries, paired = FALSE)
# Print results
cat("t-test comparing group mean differences (bills vs groceries):\n")
cat("------------------------------------------------------\n")
cat("t-value:", t_diff_bi_gr$statistic, "\n")
cat("Degrees of freedom:", t_diff_bi_gr$parameter, "\n")
cat("p-value:", t_diff_bi_gr$p.value, "\n")
cat("Mean difference (Bills vs Groceries):", t_diff_bi_gr$estimate, "\n")
cat("95% Confidence Interval: [", t_diff_bi_gr$conf.int[1], ",", t_diff_bi_gr$conf.int[2], "]\n")
# Calls vs Hotmeal
t_diff_ch <- t.test(diff_calls, diff_hotmeal, paired = FALSE)
# Print results
cat("t-test comparing group mean differences (calls vs hotmeal):\n")
cat("------------------------------------------------------\n")
cat("t-value:", t_diff_ch$statistic, "\n")
cat("Degrees of freedom:", t_diff_ch$parameter, "\n")
cat("p-value:", t_diff_ch$p.value, "\n")
cat("Mean difference (Calls - Hotmeal):", t_diff_ch$estimate, "\n")
cat("95% Confidence Interval: [", t_diff_ch$conf.int[1], ",", t_diff_ch$conf.int[2], "]\n")
# Calls vs Groceries
t_diff_cg <- t.test(diff_calls, diff_groceries, paired = FALSE)
# Print results
cat("t-test comparing group mean differences (calls vs groceries):\n")
cat("------------------------------------------------------\n")
cat("t-value:", t_diff_cg$statistic, "\n")
cat("Degrees of freedom:", t_diff_cg$parameter, "\n")
cat("p-value:", t_diff_cg$p.value, "\n")
cat("Mean difference (Calls - Groceries):", t_diff_cg$estimate, "\n")
cat("95% Confidence Interval: [", t_diff_cg$conf.int[1], ",", t_diff_cg$conf.int[2], "]\n")
# Hotmeal vs Groceries
t_diff_hg <- t.test(diff_hotmeal, diff_groceries, paired = FALSE)
# Print results
cat("t-test comparing group mean differences (hotmeal vs groceries):\n")
cat("------------------------------------------------------\n")
cat("t-value:", t_diff_hg$statistic, "\n")
cat("Degrees of freedom:", t_diff_hg$parameter, "\n")
cat("p-value:", t_diff_hg$p.value, "\n")
cat("Mean difference (Hotmeal - Groceries):", t_diff_hg$estimate, "\n")
cat("95% Confidence Interval: [", t_diff_hg$conf.int[1], ",", t_diff_hg$conf.int[2], "]\n")
#RANDOM FOREST
library(randomForest)
library(caret)
library(ggplot2)
#Setting the random seed for reproducibility
set.seed(123)
#Setting missing values for EQ-5D-5L to median
#dt_wide$esd512[is.na(dt_wide$esd512)] <- median(dt_wide$esd512, na.rm = TRUE)
#Have missing values for adls (8) - imputing missing values with median
# Impute missing values with the median for each column
#dt1_clean[, c("eat_at_3", "bed_at_3", "toilet_at_3", "stoop_at_3", "lift_at_3",
#                 "meds_at_3", "bills_at_3", "calls_at_3", "hotmeal_at_3", "groceries_at_3")] <-
#  lapply(dt1_clean[, c("eat_at_3", "bed_at_3", "toilet_at_3", "stoop_at_3", "lift_at_3",
#                          "meds_at_3", "bills_at_3", "calls_at_3", "hotmeal_at_3", "groceries_at_3")],
#         function(x) ifelse(is.na(x), median(x, na.rm = TRUE), x))
#Splitting the data into 80% training and 20% test data on target
train_index <- createDataPartition(dt_wide$esd512, p = 0.8, list = FALSE)
lin_mod <- lm(esd512 ~ eat3 + bed3 + toilet3 + stoop3 + lift3 + meds3 + bills3 + calls3 + hotmeal3 + groceries3, data = dt_wide)
summary(lin_mod)
summary(lin_mod)
tab_model(lin_mod)
lin_mod <- lm(esd512 ~ eat3 + bed3 + toilet3 + stoop3 + lift3 + meds3 + bills3 + calls3 + hotmeal3 + groceries3, data = dt_wide)
summary(lin_mod)
#RANDOM FOREST
library(randomForest)
library(caret)
library(ggplot2)
#Setting the random seed for reproducibility
set.seed(123)
#Setting missing values for EQ-5D-5L to median
dt_wide$esd512[is.na(dt_wide$esd512)] <- median(dt_wide$esd512, na.rm = TRUE)
#Have missing values for adls (8) - imputing missing values with median
# Impute missing values with the median for each column
dt_wide[, c("eat3", "bed3", "toilet3", "stoop3", "lift3",
"meds3", "bills3", "calls3", "hotmeal3", "groceries3")] <-
lapply(dt_wide[, c("eat3", "bed3", "toilet3", "stoop3", "lift3",
"meds3", "bills3", "calls3", "hotmeal3", "groceries3")],
function(x) ifelse(is.na(x), median(x, na.rm = TRUE), x))
#Splitting the data into 80% training and 20% test data on target
train_index <- createDataPartition(dt_wide$esd512, p = 0.8, list = FALSE)
eq5d5l_train <- dt1_clean[train_index, ]
eq5d5l_test <- dt1_clean[-train_index, ]
set.seed(0) # for reproducibility
#Running Random Forest model
rf_model <- randomForest(esd512 ~ eat3 + bed3 + toilet3 + stoop3 + lift3 + meds3 + bills3 + calls3 + hotmeal3 + groceries3, data = eq5d5l_train, importance = TRUE, proximity = TRUE) #ntree = 500, mtry = sqrt(ncol(dt1) - 1), nodesize = 5)
#RANDOM FOREST
library(randomForest)
library(caret)
library(ggplot2)
#Setting the random seed for reproducibility
set.seed(123)
#Setting missing values for EQ-5D-5L to median
dt_wide$esd512[is.na(dt_wide$esd512)] <- median(dt_wide$esd512, na.rm = TRUE)
#Have missing values for adls (8) - imputing missing values with median
# Impute missing values with the median for each column
dt_wide[, c("eat3", "bed3", "toilet3", "stoop3", "lift3",
"meds3", "bills3", "calls3", "hotmeal3", "groceries3")] <-
lapply(dt_wide[, c("eat3", "bed3", "toilet3", "stoop3", "lift3",
"meds3", "bills3", "calls3", "hotmeal3", "groceries3")],
function(x) ifelse(is.na(x), median(x, na.rm = TRUE), x))
#Splitting the data into 80% training and 20% test data on target
train_index <- createDataPartition(dt_wide$esd512, p = 0.8, list = FALSE)
eq5d5l_train <- dt_wide[train_index, ]
eq5d5l_test <- dt_wide[-train_index, ]
set.seed(0) # for reproducibility
#Running Random Forest model
rf_model <- randomForest(esd512 ~ eat3 + bed3 + toilet3 + stoop3 + lift3 + meds3 + bills3 + calls3 + hotmeal3 + groceries3, data = eq5d5l_train, importance = TRUE, proximity = TRUE) #ntree = 500, mtry = sqrt(ncol(dt1) - 1), nodesize = 5)
#Running prediction on test data
y_pred_rf1 <- predict(rf_model, newdata = eq5d5l_test)
#Calculating mean squared error of predictions
mse1 <- mean((eq5d5l_test$esd512 - y_pred_rf1)^2)
mse1
#Summary of variable importance measures
importance_scores <- importance(rf_model)
print(importance_scores)
#Plotting variable important
varImpPlot(rf_model)
#RANDOM FOREST
library(randomForest)
library(caret)
library(ggplot2)
#Setting the random seed for reproducibility
set.seed(123)
#Setting missing values for EQ-5D-5L to median
dt_wide$esd512[is.na(dt_wide$esd512)] <- median(dt_wide$esd512, na.rm = TRUE)
#Have missing values for adls (8) - imputing missing values with median
# Impute missing values with the median for each column
dt_wide[, c("eat3", "bed3", "toilet3", "stoop3", "lift3",
"meds3", "bills3", "calls3", "hotmeal3", "groceries3")] <-
lapply(dt_wide[, c("eat3", "bed3", "toilet3", "stoop3", "lift3",
"meds3", "bills3", "calls3", "hotmeal3", "groceries3")],
function(x) ifelse(is.na(x), median(x, na.rm = TRUE), x))
#Splitting the data into 80% training and 20% test data on target
train_index <- createDataPartition(dt_wide$esd512, p = 0.8, list = FALSE, times=10)
eq5d5l_train <- dt_wide[train_index, ]
#RANDOM FOREST
library(randomForest)
library(caret)
library(ggplot2)
#Setting the random seed for reproducibility
set.seed(123)
#Setting missing values for EQ-5D-5L to median
dt_wide$esd512[is.na(dt_wide$esd512)] <- median(dt_wide$esd512, na.rm = TRUE)
#Have missing values for adls (8) - imputing missing values with median
# Impute missing values with the median for each column
dt_wide[, c("eat3", "bed3", "toilet3", "stoop3", "lift3",
"meds3", "bills3", "calls3", "hotmeal3", "groceries3")] <-
lapply(dt_wide[, c("eat3", "bed3", "toilet3", "stoop3", "lift3",
"meds3", "bills3", "calls3", "hotmeal3", "groceries3")],
function(x) ifelse(is.na(x), median(x, na.rm = TRUE), x))
#Splitting the data into 80% training and 20% test data on target
train_index <- createDataPartition(dt_wide$esd512, p = 0.8, list = FALSE)
eq5d5l_train <- dt_wide[train_index, ]
eq5d5l_test <- dt_wide[-train_index, ]
set.seed(0) # for reproducibility
#Running Random Forest model
rf_model <- randomForest(esd512 ~ eat3 + bed3 + toilet3 + stoop3 + lift3 + meds3 + bills3 + calls3 + hotmeal3 + groceries3, data = eq5d5l_train, importance = TRUE, proximity = TRUE) #ntree = 500, mtry = sqrt(ncol(dt1) - 1), nodesize = 5)
#Running prediction on test data
y_pred_rf1 <- predict(rf_model, newdata = eq5d5l_test)
#Calculating mean squared error of predictions
mse1 <- mean((eq5d5l_test$esd512 - y_pred_rf1)^2)
mse1
#Summary of variable importance measures
importance_scores <- importance(rf_model)
print(importance_scores)
#Plotting variable important
varImpPlot(rf_model)
#RANDOM FOREST
library(randomForest)
library(caret)
library(ggplot2)
#Setting the random seed for reproducibility
set.seed(123)
#Setting missing values for EQ-5D-5L to median
dt_wide$esd512[is.na(dt_wide$esd512)] <- median(dt_wide$esd512, na.rm = TRUE)
#Have missing values for adls (8) - imputing missing values with median
# Impute missing values with the median for each column
dt_wide[, c("eat3", "bed3", "toilet3", "stoop3", "lift3",
"meds3", "bills3", "calls3", "hotmeal3", "groceries3")] <-
lapply(dt_wide[, c("eat3", "bed3", "toilet3", "stoop3", "lift3",
"meds3", "bills3", "calls3", "hotmeal3", "groceries3")],
function(x) ifelse(is.na(x), median(x, na.rm = TRUE), x))
#Splitting the data into 80% training and 20% test data on target
train_index <- createDataPartition(dt_wide$esd512, p = 0.8, list = FALSE)
eq5d5l_train <- dt_wide[train_index, ]
eq5d5l_test <- dt_wide[-train_index, ]
set.seed(0) # for reproducibility
#Running Random Forest model
rf_model <- randomForest(esd512 ~ eat3 + bed3 + toilet3 + stoop3 + lift3 + meds3 + bills3 + calls3 + hotmeal3 + groceries3, data = eq5d5l_train, importance = TRUE, proximity = TRUE) #ntree = 500, mtry = sqrt(ncol(dt1) - 1), nodesize = 5)
#Running prediction on test data
y_pred_rf1 <- predict(rf_model, newdata = eq5d5l_test)
#Calculating mean squared error of predictions
mse1 <- mean((eq5d5l_test$esd512 - y_pred_rf1)^2)
mse1
#Summary of variable importance measures
importance_scores <- importance(rf_model)
print(importance_scores)
#Plotting variable important
varImpPlot(rf_model)
# univariate models
model_eat <- lm(esd512 ~ eat3, data = dt_wide)
summary(model_eat)
R2_model_eat <- summary(model_eat)$r.squared
model_bed <- lm(esd512 ~ bed3, data = dt_wide)
summary(model_bed)
R2_model_bed <- summary(model_bed)$r.squared
model_toilet <- lm(esd512 ~ toilet3, data = dt_wide)
summary(model_toilet)
R2_model_toilet <- summary(model_toilet)$r.squared
model_stoop <- lm(esd512 ~ stoop3, data = dt_wide)
summary(model_stoop)
R2_model_stoop <- summary(model_stoop)$r.squared
model_lift <- lm(esd512 ~ lift3, data = dt_wide)
summary(model_lift)
R2_model_lift <- summary(model_lift)$r.squared
model_meal <- lm(esd512 ~ hotmeal3, data = dt_wide)
summary(model_meal)
R2_model_meal <- summary(model_meal)$r.squared
model_groceries <- lm(esd512 ~ groceries3, data = dt_wide)
summary(model_groceries)
R2_model_groceries <- summary(model_groceries)$r.squared
model_calls <- lm(esd512 ~ calls3, data = dt_wide)
summary(model_calls)
R2_model_calls <- summary(model_calls)$r.squared
model_meds <- lm(esd512 ~ meds3, data = dt_wide)
summary(model_meds)
R2_model_meds <- summary(model_meds)$r.squared
model_bills <- lm(esd512 ~ bills3, data = dt_wide)
summary(model_bills)
R2_model_bills <- summary(model_bills)$r.squared
# adjusted models
model_adjusted <- lm(esd512 ~ eat3 + bed3 + toilet3 + stoop3 + lift3 + hotmeal3 + groceries3 + calls3 + meds3 + bills3, data = dt_wide)
summary(model_adjusted)
R2_model_adjusted <- summary(model_adjusted)$r.squared
model_adjusted2 <- lm(esd512 ~ eat3 + bed3 + toilet3 + stoop3 + lift3 + hotmeal3 + groceries3 + calls3 + meds3 + bills3 + sex + as.factor(age_cat) + race_eth, data = dt_wide)
summary(model_adjusted2)
R2_model_adjusted <- summary(model_adjusted)$r.squared
#Compared R2
r2_comparison <- data.frame(
Model = c("Model Eat", "Model Bed", "Model Toilet", "Model Stoop", "Model Lift", "Model Meal", "Model Groceries", "Model Calls", "Model Meds", "Model Bills"),
R_squared = c(R2_model_eat, R2_model_bed, R2_model_toilet, R2_model_stoop, R2_model_lift, R2_model_meal, R2_model_groceries, R2_model_calls, R2_model_meds, R2_model_bills)
)
print(r2_comparison)
# univariate models
model_eat <- lm(esd512 ~ eat3, data = dt_wide)
summary(model_eat)
R2_model_eat <- summary(model_eat)$r.squared
model_bed <- lm(esd512 ~ bed3, data = dt_wide)
summary(model_bed)
R2_model_bed <- summary(model_bed)$r.squared
model_toilet <- lm(esd512 ~ toilet3, data = dt_wide)
summary(model_toilet)
R2_model_toilet <- summary(model_toilet)$r.squared
model_stoop <- lm(esd512 ~ stoop3, data = dt_wide)
summary(model_stoop)
R2_model_stoop <- summary(model_stoop)$r.squared
model_lift <- lm(esd512 ~ lift3, data = dt_wide)
summary(model_lift)
R2_model_lift <- summary(model_lift)$r.squared
model_meal <- lm(esd512 ~ hotmeal3, data = dt_wide)
summary(model_meal)
R2_model_meal <- summary(model_meal)$r.squared
model_groceries <- lm(esd512 ~ groceries3, data = dt_wide)
summary(model_groceries)
R2_model_groceries <- summary(model_groceries)$r.squared
model_calls <- lm(esd512 ~ calls3, data = dt_wide)
summary(model_calls)
R2_model_calls <- summary(model_calls)$r.squared
model_meds <- lm(esd512 ~ meds3, data = dt_wide)
summary(model_meds)
R2_model_meds <- summary(model_meds)$r.squared
model_bills <- lm(esd512 ~ bills3, data = dt_wide)
summary(model_bills)
R2_model_bills <- summary(model_bills)$r.squared
# adjusted models
model_adjusted <- lm(esd512 ~ eat3 + bed3 + toilet3 + stoop3 + lift3 + hotmeal3 + groceries3 + calls3 + meds3 + bills3, data = dt_wide)
summary(model_adjusted)
R2_model_adjusted <- summary(model_adjusted)$r.squared
model_adjusted2 <- lm(esd512 ~ eat3 + bed3 + toilet3 + stoop3 + lift3 + hotmeal3 + groceries3 + calls3 + meds3 + bills3 + sex + as.factor(age_cat) + race_eth, data = dt_wide)
summary(model_adjusted2)
R2_model_adjusted2 <- summary(model_adjusted2)$r.squared
#Compared R2
r2_comparison <- data.frame(
Model = c("Model Eat", "Model Bed", "Model Toilet", "Model Stoop", "Model Lift", "Model Meal", "Model Groceries", "Model Calls", "Model Meds", "Model Bills", "Model Adjusted ADLs", "Model Adjusted Covariates"),
R_squared = c(R2_model_eat, R2_model_bed, R2_model_toilet, R2_model_stoop, R2_model_lift, R2_model_meal, R2_model_groceries, R2_model_calls, R2_model_meds, R2_model_bills, R2_model_adjusted, R2_model_adjusted2)
)
print(r2_comparison)
